{"version":3,"sources":["Users.js"],"names":["getUsers","req","res","User","findAll","attributes","response","status","json","msg","message","getUsertById","findOne","where","uuid","params","id","createUser","body","name","email","password","confPassword","role","argon2","hash","hashPassword","create","updateUser","user","update","deleteUser","destroy"],"mappings":"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","sourcesContent":["import User from \"../model/UserModel.js\";\r\nimport argon2 from \"argon2\";\r\n\r\nexport const getUsers = async(req, res) =>{\r\n    try {\r\n        const response = await User.findAll({\r\n            attributes: ['uuid', 'name', 'email', 'role']\r\n        });\r\n        res.status(200).json(response);\r\n    } catch (error) {\r\n        res.status(500).json({msg: error.message});\r\n    }\r\n}\r\n\r\nexport const getUsertById = async(req, res) =>{\r\n    try {\r\n        const response = await User.findOne({\r\n            attributes: ['uuid', 'name', 'email', 'role'],\r\n            where:{\r\n                uuid: req.params.id\r\n            }\r\n        });\r\n        res.status(200).json(response);\r\n    } catch (error) {\r\n        res.status(500).json({msg: error.message});\r\n    }\r\n}\r\nexport const createUser = async(req, res) =>{\r\n    const {name, email, password, confPassword, role} = req.body;\r\n    if(password !== confPassword) return res.status(400).json({msg: \"password dan confirm password tidak cocok\"});\r\n    const hashPassword = await argon2.hash(password);\r\n    try {\r\n        await User.create({\r\n            name: name,\r\n            email: email,\r\n            password: hashPassword,\r\n            role: role\r\n        });\r\n        res.status(201).json({msg : \"register berhasil\"});\r\n    } catch (error) {\r\n        res.status(400).json({msg: error.message});\r\n    }\r\n}\r\nexport const updateUser = async(req, res) =>{\r\n    const user = await User.findOne({\r\n        where:{\r\n            uuid: req.params.id\r\n        }\r\n    });\r\n    if(!user) return res.status(404).json({msg: \"User tidak ditemukan\"});\r\n    const {name, email, password, confPassword, role} = req.body;\r\n    let hashPassword;\r\n    if(password === \"\" || password === null){\r\n        hashPassword = user.password\r\n    } else{\r\n        hashPassword = await argon2.hash(password);\r\n    }\r\n    if(password !== confPassword) return res.status(400).json({msg: \"password dan confirm password tidak cocok\"});\r\n    try {\r\n        await User.update({\r\n            name: name,\r\n            email: email,\r\n            password: hashPassword,\r\n            role: role\r\n        },{\r\n            where:{\r\n                id: user.id\r\n            }\r\n        });\r\n        res.status(200).json({msg : \"User Updated\"});\r\n    } catch (error) {\r\n        res.status(400).json({msg: error.message});\r\n    }\r\n}\r\n\r\nexport const deleteUser = async(req, res) =>{\r\n    const user = await User.findOne({\r\n        where: {\r\n            uuid: req.params.id\r\n        }\r\n    });\r\n    if(!user) return res.status(404).json({msg: \"User tidak ditemukan\"});\r\n    try {\r\n        await User.destroy({\r\n            where:{\r\n                id: user.id\r\n            }\r\n        });\r\n        res.status(200).json({msg: \"User Deleted\"});\r\n    } catch (error) {\r\n        res.status(400).json({msg: error.message});\r\n    }\r\n}"],"file":"Users.dev.js"}