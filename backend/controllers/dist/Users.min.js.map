{"version":3,"sources":["Users.js"],"names":["_UserModel","_interopRequireDefault","require","_argon","getUsers","req","res","response","regeneratorRuntime","async","_context","prev","next","awrap","User","findAll","attributes","sent","status","json","t0","msg","message","stop","getUsertById","_context2","findOne","where","uuid","params","id","createUser","body","name","email","password","confPassword","role","argon2","hash","hashPassword","create","_context3","updateUser","user","_req$body2","_context4","abrupt","update","deleteUser","_context5","destroy"],"mappings":"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","file":"Users.min.js","sourcesContent":["import User from \"../model/UserModel.js\";\r\nimport argon2 from \"argon2\";\r\n\r\nexport const getUsers = async(req, res) =>{\r\n    try {\r\n        const response = await User.findAll({\r\n            attributes: ['uuid', 'name', 'email', 'role']\r\n        });\r\n        res.status(200).json(response);\r\n    } catch (error) {\r\n        res.status(500).json({msg: error.message});\r\n    }\r\n}\r\n\r\nexport const getUsertById = async(req, res) =>{\r\n    try {\r\n        const response = await User.findOne({\r\n            attributes: ['uuid', 'name', 'email', 'role'],\r\n            where:{\r\n                uuid: req.params.id\r\n            }\r\n        });\r\n        res.status(200).json(response);\r\n    } catch (error) {\r\n        res.status(500).json({msg: error.message});\r\n    }\r\n}\r\nexport const createUser = async(req, res) =>{\r\n    const {name, email, password, confPassword, role} = req.body;\r\n    if(password !== confPassword) return res.status(400).json({msg: \"password dan confirm password tidak cocok\"});\r\n    const hashPassword = await argon2.hash(password);\r\n    try {\r\n        await User.create({\r\n            name: name,\r\n            email: email,\r\n            password: hashPassword,\r\n            role: role\r\n        });\r\n        res.status(201).json({msg : \"register berhasil\"});\r\n    } catch (error) {\r\n        res.status(400).json({msg: error.message});\r\n    }\r\n}\r\nexport const updateUser = async(req, res) =>{\r\n    const user = await User.findOne({\r\n        where:{\r\n            uuid: req.params.id\r\n        }\r\n    });\r\n    if(!user) return res.status(404).json({msg: \"User tidak ditemukan\"});\r\n    const {name, email, password, confPassword, role} = req.body;\r\n    let hashPassword;\r\n    if(password === \"\" || password === null){\r\n        hashPassword = user.password\r\n    } else{\r\n        hashPassword = await argon2.hash(password);\r\n    }\r\n    if(password !== confPassword) return res.status(400).json({msg: \"password dan confirm password tidak cocok\"});\r\n    try {\r\n        await User.update({\r\n            name: name,\r\n            email: email,\r\n            password: hashPassword,\r\n            role: role\r\n        },{\r\n            where:{\r\n                id: user.id\r\n            }\r\n        });\r\n        res.status(200).json({msg : \"User Updated\"});\r\n    } catch (error) {\r\n        res.status(400).json({msg: error.message});\r\n    }\r\n}\r\n\r\nexport const deleteUser = async(req, res) =>{\r\n    const user = await User.findOne({\r\n        where: {\r\n            uuid: req.params.id\r\n        }\r\n    });\r\n    if(!user) return res.status(404).json({msg: \"User tidak ditemukan\"});\r\n    try {\r\n        await User.destroy({\r\n            where:{\r\n                id: user.id\r\n            }\r\n        });\r\n        res.status(200).json({msg: \"User Deleted\"});\r\n    } catch (error) {\r\n        res.status(400).json({msg: error.message});\r\n    }\r\n}"]}